////
/// Functions.
/// @link http://thesassway.com/intermediate/if-for-each-while
/// @group functions
////

/// Max breakpoint.
$max-breakpoint: 1440

/// Function vw.
/// @link http://sassbreak.com/viewport-relative-headings-with-sass
/// @param {number} $target - number in pixel for conversion.
@function get-vw($target)
  /// 1 vw is equal to 1% of the viewport width.
  $vw-context: $max-breakpoint * 0.01 * 1px
  /// 1% viewport width.
  @return $target / $vw-context * 1vw

/// Mixin that uses the function vw.
/// @param {number} $size - number in pixel for conversion.
=vw($size)
  font-size: get-vw($size)

/// Strips unit suffix from value.
/// @param {number} $num - number with unit.
/// @return {number} number with the unit removed.
@function _strip-unit($num)
  @if type-of($num) != "number"
    @warn "num: #{$num} is not a number"
    @return null
  @return $num / ($num * 0 + 1)

/// Converts to rem, utility for rem-calc.
/// @param {number} $value - valor to conversion.
/// @param {number} $rem-base - basis for the conversion.
@function _convert-to-rem($value, $base-value: $rem-base)
  @if type-of($value) != "number"
    @warn "value: #{$value} is not a number"
    @return null
  @if type-of($base-value) != "number"
    @warn "base-value: #{$base-value} is not a number"
    @return null
  $value: _strip-unit($value) / _strip-unit($base-value) * 1rem
  @if _strip-unit($value) == 0
    $value: 0
  /// Turn 0rem into 0.
  @return $value

/// Calculates rem value from number.
/// @param {number} $value - valor to conversion.
/// @param {number} $rem-base - basis for the conversion.
/// @return {number} number converted to rem.
@function rem-calc($values, $base-value: $rem-base)
  @if type-of($values) != "number"
    @warn "values: #{$values} is not a number"
    @return null
  @if type-of($base-value) != "number"
    @warn "base-value: #{$base-value} is not a number"
    @return null
  $max: length($values)
  @if $max == 1
    @return _convert-to-rem(nth($values, 1), $base-value)
  $remValues: ()
  @for $i from 1 through $max
    $remValues: append($remValues, _convert-to-rem(nth($values, $i), $base-value))
  @return $remValues

/// Converts to vmin, utility for vmin-calc.
/// @param {number} $value - valor to conversion.
/// @param {number} $rem-base - basis for the conversion.
@function _convert-to-vmin($value, $base-value: $rem-base)
  @if type-of($value) != "number"
    @warn "value: #{$value} is not a number"
    @return null
  @if type-of($base-value) != "number"
    @warn "base-value: #{$base-value} is not a number"
    @return null
  $value: _strip-unit($value) / _strip-unit($base-value) * 2.0vmin
  @if _strip-unit($value) == 0
    $value: 0
  /// Turn 0vmin into 0.
  @return $value

/// Calculates vmin value from number.
/// @param {number} $value - valor to conversion.
/// @param {number} $rem-base - basis for the conversion.
/// @return {number} number converted to vmin.
@function vmin-calc($values, $base-value: $rem-base)
  @if type-of($values) != "number"
    @warn "values: #{$values} is not a number"
    @return null
  @if type-of($base-value) != "number"
    @warn "base-value: #{$base-value} is not a number"
    @return null
  $max: length($values)
  @if $max == 1
    @return _convert-to-vmin(nth($values, 1), $base-value)
  $vminValues: ()
  @for $i from 1 through $max
    $vminValues: append($vminValues, _convert-to-vmin(nth($values, $i), $base-value))
  @return $vminValues

/// Converts to vw, utility for vw-calc.
/// @param {number} $value - valor to conversion.
/// @param {number} $rem-base - basis for the conversion.
@function _convert-to-vw($value, $base-value: $rem-base)
  @if type-of($value) != "number"
    @warn "value: #{$value} is not a number"
    @return null
  @if type-of($base-value) != "number"
    @warn "base-value: #{$base-value} is not a number"
    @return null
  $value: _strip-unit($value) / _strip-unit($base-value) * 1.1111vw
  @if _strip-unit($value) == 0
    $value: 0
  /// Turn 0vw into 0.
  @return $value

/// Calculates vw value from number.
/// @param {number} $value - valor to conversion.
/// @param {number} $rem-base - basis for the conversion.
/// @return {number} number converted to vw.

@function vw-calc($values, $base-value: $rem-base)
  @if type-of($values) != "number"
    @warn "values: #{$values} is not a number"
    @return null
  @if type-of($base-value) != "number"
    @warn "base-value: #{$base-value} is not a number"
    @return null
  $max: length($values)
  @if $max == 1
    @return _convert-to-vw(nth($values, 1), $base-value)
  $vwValues: ()
  @for $i from 1 through $max
    $vwValues: append($vwValues, _convert-to-vw(nth($values, $i), $base-value))
  @return $vwValues

/// Calculate rem value from px number.
/// @param {number} $value - valor to conversion.
/// @param {number} $rem-size - basis for the conversion.
/// @return {number} number converted to rem.

@function get-rem($value)
  @if type-of($value) != 'number'
    @warn 'values: #{$value} is not a number'
    @return null
  $rem-size: $value / 16px
  @return #{$rem-size}rem
